//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BSA.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BSAEntities : DbContext
    {
        public BSAEntities()
            : base("name=BSAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankBranch> BankBranches { get; set; }
        public virtual DbSet<BSAEmployee> BSAEmployees { get; set; }
        public virtual DbSet<BSAMember> BSAMembers { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<DropDownItem> DropDownItems { get; set; }
        public virtual DbSet<DropDownType> DropDownTypes { get; set; }
        public virtual DbSet<Education> Educations { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Seed> Seeds { get; set; }
        public virtual DbSet<SeedCategory> SeedCategories { get; set; }
        public virtual DbSet<SubMenu> SubMenus { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserMenu> UserMenus { get; set; }
        public virtual DbSet<Upazila> Upazilas { get; set; }
        public virtual DbSet<BsaAGM> BsaAGMs { get; set; }
    
        [DbFunction("BSAEntities", "CSVToTableWithID")]
        public virtual IQueryable<CSVToTableWithID_Result> CSVToTableWithID(Nullable<int> iD, string inStr)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var inStrParameter = inStr != null ?
                new ObjectParameter("InStr", inStr) :
                new ObjectParameter("InStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CSVToTableWithID_Result>("[BSAEntities].[CSVToTableWithID](@ID, @InStr)", iDParameter, inStrParameter);
        }
    
        public virtual int DeleteLeaveHelper(Nullable<long> leaveApplicationId)
        {
            var leaveApplicationIdParameter = leaveApplicationId.HasValue ?
                new ObjectParameter("LeaveApplicationId", leaveApplicationId) :
                new ObjectParameter("LeaveApplicationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLeaveHelper", leaveApplicationIdParameter);
        }
    
        public virtual int GetPFLastMonthUpdatedByEmployeeId(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPFLastMonthUpdatedByEmployeeId", employeeIdParameter);
        }
    
        public virtual int GetUserRole(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRole", userIdParameter);
        }
    
        public virtual int note_sp_If_AttMachine_Not_Working()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("note_sp_If_AttMachine_Not_Working");
        }
    
        public virtual int RiponBoudi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RiponBoudi");
        }
    
        public virtual int sp_Attendence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Attendence");
        }
    
        public virtual int sp_AttendenceRequestToHr(Nullable<long> hrId)
        {
            var hrIdParameter = hrId.HasValue ?
                new ObjectParameter("HrId", hrId) :
                new ObjectParameter("HrId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendenceRequestToHr", hrIdParameter);
        }
    
        public virtual int sp_AttendenceRequestToManager(Nullable<long> managerId)
        {
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendenceRequestToManager", managerIdParameter);
        }
    
        public virtual int sp_AttendenceSummery(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string empId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendenceSummery", fromDateParameter, toDateParameter, empIdParameter);
        }
    
        public virtual int sp_DailyAttendence(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DailyAttendence", dateParameter);
        }
    
        public virtual int sp_DailyAttendenceTeamWise(Nullable<int> managerId, Nullable<System.DateTime> date)
        {
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DailyAttendenceTeamWise", managerIdParameter, dateParameter);
        }
    
        public virtual int sp_EmployeeAttendence(string empId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmployeeAttendence", empIdParameter);
        }
    
        public virtual int sp_FinalAttendence(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FinalAttendence", dateParameter);
        }
    
        public virtual int sp_FinishedGoodsStockReports(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FinishedGoodsStockReports", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_GetEmployeeEvent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetEmployeeEvent");
        }
    
        public virtual int sp_GetPersonalAttendanceApplicationStatus(Nullable<long> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPersonalAttendanceApplicationStatus", empIdParameter);
        }
    
        public virtual int sp_getRmFormula(Nullable<int> productId, Nullable<decimal> qty)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getRmFormula", productIdParameter, qtyParameter);
        }
    
        public virtual int sp_GetRmFormulaWithAvailableQty(Nullable<int> requisitionrId)
        {
            var requisitionrIdParameter = requisitionrId.HasValue ?
                new ObjectParameter("RequisitionrId", requisitionrId) :
                new ObjectParameter("RequisitionrId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRmFormulaWithAvailableQty", requisitionrIdParameter);
        }
    
        public virtual int sp_GetStoreProductQuantity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetStoreProductQuantity");
        }
    
        public virtual int sp_HrApproveAction_1(Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> attendenceDate, Nullable<int> id, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_HrApproveAction_1", intimeParameter, outTimeParameter, empStatusParameter, employeeIdParameter, attendenceDateParameter, idParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_InOutTime(string empId, Nullable<System.DateTime> date)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InOutTime", empIdParameter, dateParameter);
        }
    
        public virtual int sp_insertDefaultEmpAttendence(Nullable<System.DateTime> attendenceDate)
        {
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertDefaultEmpAttendence", attendenceDateParameter);
        }
    
        public virtual int sp_lastUpdatedProductPrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_lastUpdatedProductPrice");
        }
    
        public virtual int sp_ManagerActionForOnField_1(string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> applicationDate, Nullable<int> id, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManagerActionForOnField_1", empStatusParameter, employeeIdParameter, applicationDateParameter, idParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_ManagerActionForTimeApproval_1(Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> attendenceDate, string comments, Nullable<int> id)
        {
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManagerActionForTimeApproval_1", intimeParameter, outTimeParameter, empStatusParameter, employeeIdParameter, attendenceDateParameter, commentsParameter, idParameter);
        }
    
        public virtual int sp_ManagerActionForTour(string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> applicationDate, Nullable<int> id, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManagerActionForTour", empStatusParameter, employeeIdParameter, applicationDateParameter, idParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_Monthly_AttendenceSummery(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> salaryTag)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var salaryTagParameter = salaryTag.HasValue ?
                new ObjectParameter("SalaryTag", salaryTag) :
                new ObjectParameter("SalaryTag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Monthly_AttendenceSummery", fromDateParameter, toDateParameter, salaryTagParameter);
        }
    
        public virtual int sp_NewTeamAttendance(Nullable<int> managerId, Nullable<System.DateTime> date)
        {
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewTeamAttendance", managerIdParameter, dateParameter);
        }
    
        public virtual int sp_NewTeamAttendanceWithDateRange(Nullable<int> managerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewTeamAttendanceWithDateRange", managerIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_RequisitionDelivery(Nullable<int> reauisitionId, Nullable<System.DateTime> deliveryDate, string deliverNo)
        {
            var reauisitionIdParameter = reauisitionId.HasValue ?
                new ObjectParameter("ReauisitionId", reauisitionId) :
                new ObjectParameter("ReauisitionId", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliverNoParameter = deliverNo != null ?
                new ObjectParameter("DeliverNo", deliverNo) :
                new ObjectParameter("DeliverNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RequisitionDelivery", reauisitionIdParameter, deliveryDateParameter, deliverNoParameter);
        }
    
        public virtual int sp_UpdateAttendence(Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> attendenceDate, string comments, Nullable<int> id)
        {
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAttendence", intimeParameter, outTimeParameter, empStatusParameter, employeeIdParameter, attendenceDateParameter, commentsParameter, idParameter);
        }
    
        public virtual int sp_UpdateAttendenceForAttendenceModify(Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> attendenceDate, string comments, Nullable<int> id)
        {
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAttendenceForAttendenceModify", intimeParameter, outTimeParameter, empStatusParameter, employeeIdParameter, attendenceDateParameter, commentsParameter, idParameter);
        }
    
        public virtual int sp_UpdateAttendenceForHrTimeApproval(Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> attendenceDate, string comments, Nullable<int> id)
        {
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAttendenceForHrTimeApproval", intimeParameter, outTimeParameter, empStatusParameter, employeeIdParameter, attendenceDateParameter, commentsParameter, idParameter);
        }
    
        public virtual int sp_UpdateAttendenceForManagerOnField(string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> applicationDate, Nullable<int> id, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAttendenceForManagerOnField", empStatusParameter, employeeIdParameter, applicationDateParameter, idParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_UpdateAttendenceForManagerTimeApproval(Nullable<System.TimeSpan> intime, Nullable<System.TimeSpan> outTime, string empStatus, Nullable<long> employeeId, Nullable<System.DateTime> attendenceDate, string comments, Nullable<int> id)
        {
            var intimeParameter = intime.HasValue ?
                new ObjectParameter("Intime", intime) :
                new ObjectParameter("Intime", typeof(System.TimeSpan));
    
            var outTimeParameter = outTime.HasValue ?
                new ObjectParameter("OutTime", outTime) :
                new ObjectParameter("OutTime", typeof(System.TimeSpan));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(long));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("AttendenceDate", attendenceDate) :
                new ObjectParameter("AttendenceDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAttendenceForManagerTimeApproval", intimeParameter, outTimeParameter, empStatusParameter, employeeIdParameter, attendenceDateParameter, commentsParameter, idParameter);
        }
    
        public virtual int sp_YearlyHolidayEvent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_YearlyHolidayEvent");
        }
    
        public virtual int spGetCompanyIdsByUserId(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCompanyIdsByUserId", userIdParameter);
        }
    
        public virtual int spGetCustomerAccounts(string searchText, Nullable<int> companyId)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCustomerAccounts", searchTextParameter, companyIdParameter);
        }
    
        public virtual int spGetCustomerBusinessCost(Nullable<int> vendorId, Nullable<int> productId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCustomerBusinessCost", vendorIdParameter, productIdParameter);
        }
    
        public virtual int spGetCustomerLedger(Nullable<int> vendorId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCustomerLedger", vendorIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int spGetCustomerLedgerByCustomer(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCustomerLedgerByCustomer", vendorIdParameter);
        }
    
        public virtual int spGetCustomerPayments(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCustomerPayments", searchTextParameter);
        }
    
        public virtual int spGetCustomerReceiableLadger(Nullable<int> vendorId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCustomerReceiableLadger", vendorIdParameter);
        }
    
        public virtual int spGetDeliveredProductsByOrder(Nullable<long> orderMasterId)
        {
            var orderMasterIdParameter = orderMasterId.HasValue ?
                new ObjectParameter("orderMasterId", orderMasterId) :
                new ObjectParameter("orderMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDeliveredProductsByOrder", orderMasterIdParameter);
        }
    
        public virtual int spGetDeliverItems(Nullable<int> stockInfoId)
        {
            var stockInfoIdParameter = stockInfoId.HasValue ?
                new ObjectParameter("StockInfoId", stockInfoId) :
                new ObjectParameter("StockInfoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDeliverItems", stockInfoIdParameter);
        }
    
        public virtual int spGetDeliveryInvoice(Nullable<long> orderMasterId)
        {
            var orderMasterIdParameter = orderMasterId.HasValue ?
                new ObjectParameter("OrderMasterId", orderMasterId) :
                new ObjectParameter("OrderMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDeliveryInvoice", orderMasterIdParameter);
        }
    
        public virtual ObjectResult<spGetDropDownData_Result> spGetDropDownData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDropDownData_Result>("spGetDropDownData");
        }
    
        public virtual int spGetDropdownLeaveCategories(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDropdownLeaveCategories", idParameter);
        }
    
        public virtual int spGetEmployeeBiodataPersonalReport(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmployeeBiodataPersonalReport", employeeIdParameter);
        }
    
        public virtual int spGetEmployeeBiodataServiceInfoReport(string employeeId)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmployeeBiodataServiceInfoReport", employeeIdParameter);
        }
    
        public virtual int spGetLeaveBalance(Nullable<long> id, string year)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetLeaveBalance", idParameter, yearParameter);
        }
    
        public virtual int spGetMemberPFSummary(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetMemberPFSummary", employeeIDParameter);
        }
    
        public virtual int spGetOrderInvoice(Nullable<long> orderMasterId)
        {
            var orderMasterIdParameter = orderMasterId.HasValue ?
                new ObjectParameter("OrderMasterId", orderMasterId) :
                new ObjectParameter("OrderMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOrderInvoice", orderMasterIdParameter);
        }
    
        public virtual int spGetPFDetialsByEmployeeId(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetPFDetialsByEmployeeId", employeeIDParameter);
        }
    
        public virtual int spGetStoreAvailableQty(Nullable<int> productId, Nullable<int> stockInfoId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var stockInfoIdParameter = stockInfoId.HasValue ?
                new ObjectParameter("StockInfoId", stockInfoId) :
                new ObjectParameter("StockInfoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetStoreAvailableQty", productIdParameter, stockInfoIdParameter);
        }
    
        public virtual int spGetTeamLeaveBalance(Nullable<long> managerId)
        {
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetTeamLeaveBalance", managerIdParameter);
        }
    
        public virtual int spGetUpazilaAssign(Nullable<long> employeeId, Nullable<int> districtId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("districtId", districtId) :
                new ObjectParameter("districtId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUpazilaAssign", employeeIdParameter, districtIdParameter);
        }
    
        public virtual int spLeaveApplicationMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaveApplicationMap");
        }
    
        public virtual int spProcessLeave(Nullable<long> id, string leaveYear)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var leaveYearParameter = leaveYear != null ?
                new ObjectParameter("LeaveYear", leaveYear) :
                new ObjectParameter("LeaveYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProcessLeave", idParameter, leaveYearParameter);
        }
    
        public virtual int spUpdateAttendanceFromLeave(Nullable<long> leaveApplicationId, Nullable<long> id)
        {
            var leaveApplicationIdParameter = leaveApplicationId.HasValue ?
                new ObjectParameter("LeaveApplicationId", leaveApplicationId) :
                new ObjectParameter("LeaveApplicationId", typeof(long));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAttendanceFromLeave", leaveApplicationIdParameter, idParameter);
        }
    
        public virtual int spUpdateVendorDuePayment(Nullable<long> orderDeliverId)
        {
            var orderDeliverIdParameter = orderDeliverId.HasValue ?
                new ObjectParameter("orderDeliverId", orderDeliverId) :
                new ObjectParameter("orderDeliverId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateVendorDuePayment", orderDeliverIdParameter);
        }
    
        [DbFunction("BSAEntities", "UDFSeniorityPosition")]
        public virtual IQueryable<UDFSeniorityPosition_Result> UDFSeniorityPosition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UDFSeniorityPosition_Result>("[BSAEntities].[UDFSeniorityPosition]()");
        }
    
        [DbFunction("BSAEntities", "UpdateOfficerFullNameStr")]
        public virtual IQueryable<UpdateOfficerFullNameStr_Result> UpdateOfficerFullNameStr(Nullable<int> vOfficerid)
        {
            var vOfficeridParameter = vOfficerid.HasValue ?
                new ObjectParameter("VOfficerid", vOfficerid) :
                new ObjectParameter("VOfficerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UpdateOfficerFullNameStr_Result>("[BSAEntities].[UpdateOfficerFullNameStr](@VOfficerid)", vOfficeridParameter);
        }
    
        public virtual int UpdateOrderMasterStatus(Nullable<long> orderMasterId)
        {
            var orderMasterIdParameter = orderMasterId.HasValue ?
                new ObjectParameter("orderMasterId", orderMasterId) :
                new ObjectParameter("orderMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderMasterStatus", orderMasterIdParameter);
        }
    }
}
