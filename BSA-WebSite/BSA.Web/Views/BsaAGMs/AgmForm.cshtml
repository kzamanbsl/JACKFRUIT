@model Bsa.lib.Model.BsaAGM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>AGM Registration Form</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr style="border-color:green" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.Label("AGM Year", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AGMYear, new { htmlAttributes = new { @class = "form-control", @Value = "2021", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.AGMYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Member/ Dealer Id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MemberOrDealerId, new { htmlAttributes = new { @class = "form-control", @id = "txtMemberId" } })
                @Html.ValidationMessageFor(model => model.MemberOrDealerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Name of Dealer", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameOfDealer, new { htmlAttributes = new { @class = "form-control", @id = "txtNameOfDealer" } })
                @Html.ValidationMessageFor(model => model.NameOfDealer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Name of Representative", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameOfRepresentative, new { htmlAttributes = new { @class = "form-control", @id = "txtNameOfRepresentative" } })
                @Html.ValidationMessageFor(model => model.NameOfRepresentative, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Disrtict, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Disrtict, new { htmlAttributes = new { @class = "form-control", @id = "txtDisrtict" } })
                @Html.ValidationMessageFor(model => model.Disrtict, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Mobile No", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", @id = "txtPhoneNo" } })
                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Email", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "txtEmail", @onkeyup = "validateEmail()" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                <h3 id="result"></h3>
            </div>
        </div>
        <div class="form-group">
            @Html.Label("No of Person", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NoofPerson, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NoofPerson, "", new { @class = "error" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Registered" id="IdRegistered" disabled class="btn btn-danger" onclick="return validate()" />
            </div>
        </div>
    </div>
}
<style type="text/css">
    body {
        font-family: Arial;
        font-size: 10pt;
    }

    .error {
        color: red;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {

        $("#MemberId1").autocomplete({
            source: function (request, responce) {
                $.ajax({
                    url: "/BsaAGMs/AutoComplete",
                    method: "POST",
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify({ prefix: request.term }),
                    dataType: 'json',
                    success: function (data) {
                        responce(data.d);
                    },
                    error: function (err) {
                        alert(err);
                    }
                });
            }
        });

    });

    $("#txtMemberId, #txtNameOfDealer,#txtNameOfRepresentative,#txtDisrtict,#txtPhoneNo").keyup(function () {

        var txtMemberId = $('#txtMemberId').val();
        var txtNameOfDealer = $('#txtNameOfDealer').val();
        var txtNameOfRepresentative = $('#txtNameOfRepresentative').val();
        var txtDisrtict = $('#txtDisrtict').val();
        var txtPhoneNo = $('#txtPhoneNo').val();

        if (txtMemberId != '' && txtNameOfDealer != '' && txtNameOfRepresentative != ''
            && txtPhoneNo != '' && txtDisrtict != '') {
            $("#IdRegistered").removeAttr("disabled");
        }
        else {
            $("#IdRegistered").attr("disabled", "true");
        }
        //$('#txtLandValue').val(Landvalue);
    });

    function validate() {

        if (document.getElementById("txtMemberId").value == "") {
            alert("Member Id should not be empty");
            $("#txtMemberId").focus();
            $("#txtMemberId").css("border", "2px solid red")
        }
        else if (document.getElementById("txtNameOfDealer").value == "") {
            alert("Name Of Dealer should not be empty");
            $("#txtNameOfDealer").focus();
        }
        else if (document.getElementById("txtNameOfRepresentative").value == "") {
            alert("tName Of Representative should not be empty");
            $("#txtNameOfRepresentative").focus();
        }
        else if (document.getElementById("txtPhoneNo").value == "") {
            alert("Phone No should not be empty");
            $("#txtPhoneNo").focus();
        }
        else if (document.getElementById("txtDisrtict").value == "") {
            alert("Disrtict No should not be empty");
            $("#txtDisrtict").focus();
        }
    }

    function validateEmail() {
        var emailTextBox = document.getElementById("txtEmail");
        var email = emailTextBox.value;
        var emailRegEx = /^(([^<>()[\]\\.,;:\s@@\"]+(\.[^<>()[\]\\.,;:\s@@\"]+)*)|(\".+\"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        emailTextBox.style.color = "black";
        if (emailRegEx.test(email)) {
            emailTextBox.style.backgroundColor = "#DBF9DB";
        }
        else {
            emailTextBox.style.backgroundColor = "red";
        }

    }
</script>
