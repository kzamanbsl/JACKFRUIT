@model KGERP.Service.Implementation.Procurement.VMSalesOrderSlave
@using KGERP.Utility;

@{
    ViewData["Title"] = "Dealer Sales Order";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
    double totalPrice = 0;
    double discountPrice = 0;
    decimal dis = 0;
}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.OrderMasterId > 0)
        {
            <span>
                Sales Invoice History of: &nbsp; @Model.OrderNo
            </span>
        }
        else
        {
            <span>
                Dealer Sales Invoice
            </span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Dealer Sales Invoice</li>
    </ol>
</section>

@using (Html.BeginForm("DealerSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "dealerSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })
                @Html.HiddenFor(model => model.Consumption, new { id = "ProductConsumption" })

                <div class="box-danger">

                    <div class="box-body">
                        @if (Model.OrderMasterId > 0)
                        {
                            @Html.HiddenFor(model => model.StockInfoTypeId, new { id = "ddlStockInfoTypeFk" })
                            @Html.HiddenFor(model => model.StockInfoId, new { id = "ddlStockInfoId" })

                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table">
                                    <tr>
                                        <th style="width:18%">Sales From</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.StockInfoName</td>

                                        <th style="width:18%"> Date</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.OrderDate.ToShortDateString()</td>
                                    </tr>

                                    <tr>
                                        <th>Dealer</th>
                                        <th>:</th>
                                        <td>@Model.CommonCustomerName</td>

                                        <th>Dealer Phone</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPhone</td>
                                    </tr>
                                    <tr>
                                        <th>Dealer Email</th>
                                        <th>:</th>
                                        <td>@Model.CustomerEmail</td>
                                        <th>Dealer Address</th>
                                        <th>:</th>
                                        <td>@Model.CustomerAddress</td>
                                    </tr>

                                    <tr>
                                        <th>Zone</th>
                                        <th>:</th>
                                        <td>@Model.ZoneName</td>

                                        <th>Zone Incharge</th>
                                        <th>:</th>
                                        <td>@Model.ZoneIncharge</td>
                                    </tr>

                                    <tr>
                                        <th>Remarks</th>
                                        <th>:</th>
                                        <td>@Model.Remarks</td>

                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>
                        }

                        <div class="box-body">

                            @if (Model.OrderMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-4">
                                        <label for="message-text" class="col-form-label">Invoice Date:</label>
                                        <div class="form-group">
                                            <input name="OrderDate" asp-for="OrderDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker" placeholder="Invoice Date" autocomplete="off" id="txtOrderDate">
                                            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <label for="message-text" class="col-form-label">Delivery Date:</label>
                                        <div class="form-group">
                                            <input name="ExpectedDeliveryDate" asp-for="ExpectedDeliveryDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker" placeholder="Expected Delivery Date" autocomplete="off" id="txtDeliveryDate">
                                            @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label>Payment Method:</label>
                                            @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Select Payment Method==", new { id = "ddlPaymentMethodEnumFK", @class = "form-control ddlReset searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Zone:</label>
                                            @Html.DropDownListFor(model => model.ZoneFk, Model.ZoneList as SelectList, "==Select Zone==", new { id = "ddlZoneFk", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.ZoneFk, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Dealer:</label>
                                            @Html.DropDownListFor(model => model.CustomerId, Model.CustomerList as SelectList, "==Select Dealer==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Sales From:</label>
                                            @Html.DropDownListFor(model => model.StockInfoTypeId, Model.EnumStockInfoTypeList as SelectList, "==Select Sales From==", new { id = "ddlStockInfoTypeFk", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.StockInfoTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group" id="deportDivId" style="display:none;">
                                            <label>Deport:</label>
                                            @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Select Deport==", new { id = "ddlStockInfoId", @class = "form-control searchingDropdown", style = "width:100%" })
                                            @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtDescription" class="col-form-label">Remarks:</label>
                                            @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Description", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.Status == (int)EnumSOStatus.Draft)
                            {
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Product:</label>

                                            @*@Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @required = "required", @autocomplete = "on", @class = "form-control", @name = "Product Name", @id = "txtProductName" } })*@


                                            @Html.DropDownListFor(model => model.ProductId, Model.ProductList as SelectList, "==Select Product==", new { id = "txtProductName", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })

                                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(model => model.FProductId, new { id = "ddlRProductFK", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Order Ctn</label>
                                            @Html.TextBoxFor(model => model.QtyCtn, new { id = "txtOrderCtn", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Order Ctn", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.QtyCtn, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Order Pcs:</label>

                                            @Html.TextBoxFor(model => model.QtyPcs, new { id = "txtOrderPcs", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Order Pcs" })
                                            @Html.ValidationMessageFor(model => model.QtyPcs, "", new { @class = "text-danger" })

                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Free Ctn:</label>
                                            @Html.TextBoxFor(model => model.OfferCtn, new { id = "txtOfferCtn", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Free Ctn", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.OfferCtn, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Free Pcs:</label>

                                            @Html.TextBoxFor(model => model.OfferPcs, new { id = "txtOfferPcs", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Free Pcs" })
                                            @Html.ValidationMessageFor(model => model.OfferPcs, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6"></div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Dealer Price:</label>
                                            @Html.TextBoxFor(model => model.UnitPrice, new { id = "txtDealerPrice", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Dealer Price", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group ">
                                            <label>Total Amount:</label>
                                            @Html.TextBoxFor(model => model.TotalAmount, new { id = "totalAmount", @readonly = "readonly", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Total Amount", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div> 
                                    
                                    <div class="col-md-2">
                                        <div class="form-group ">
                                            <label>Total Discount:</label>
                                            @Html.TextBoxFor(model => model.DiscountAmount, new { id = "discountAmount",  type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Discount Amount" })
                                            @Html.ValidationMessageFor(model => model.DiscountAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (Model.Status == (int)EnumSOStatus.Draft)
                        {
                            <div class="box-footer">
                                <div class="row">
                                    <div class="col-md-4">
                                        <table class="table" id="tblStockAvailable">
                                            <tr>
                                                <th>Available Stock: </th>
                                                <th id="stockAvailable"></th>
                                            </tr>
                                        </table>
                                    </div>
                                    <div class="col-md-4">

                                    </div>
                                    <div class="col-lg-4 col-md-4">
                                        <input type="submit" id="soCreateBtn" value="Add Product" class="btn btn-primary btn-block" />

                                    </div>
                                </div>
                            </div>
                        }

                        <!--Body Will by Start Here-->
                        @if (Model.OrderMasterId > 0)
                        {

                            @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })

                            <div class="table-responsive col-md-12  text-nowrap">
                                <table id="KgErpDataTable" class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th style="padding:5px;text-align:center;">SL</th>
                                            <th style="padding:5px;text-align:left;">Product</th>
                                            <th style="padding:5px;text-align:center;">Cons</th>
                                            <th style="padding:5px;text-align:center;">Quantity</th>
                                            <th style="padding:5px;text-align:center;">Free Qty</th>
                                            <th style="padding:5px;text-align:center;">Dealer Price</th>
                                            <th style="padding:5px;text-align:right;">Total Price</th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th style="padding:5px;text-align:center;">Action</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.DataListSlave)
                                        {
                                            totalPrice += item.TotalAmount;
                                            discountPrice = totalPrice - Convert.ToDouble(item.ProductDiscountTotal);
                                            dis += item.ProductDiscountTotal;

                                            <tr>

                                                <td style="padding:5px">@(++sl)</td>
                                                <td style="padding:5px;text-align:left;">@item.ProductName</td>
                                                <td style="padding:5px;text-align:center;">@item.Consumption</td>
                                                @*<td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.Qty) @item.UnitName</td>*@
                                                <td style="padding:5px;text-align:center;">@item.StockInCtn Ctn and @item.StockInPcs.ToString("0") Pcs</td>
                                                <td style="padding:5px;text-align:center;">@item.OfferInCtn Ctn and @item.OfferInPcs.ToString("0") Pcs </td>
                                                <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.UnitPrice)</td>
                                                <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", item.TotalPrice)</td>

                                                @{ if (Model.Status == (int)EnumSOStatus.Draft)
                                                    {
                                                        <td style="padding:5px;text-align:center;">
                                                            <a id="@item.ID" onclick=" makeEditble(@item.OrderDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                            <a id="@item.ID" onclick="makeDeletale(@item.OrderDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteDealerSalesOrderSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>

                                    <tfoot>
                                        @*<tr>
            <th></th>
            <th colspan="2">Total:</th>
            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", totalPrice) </th>
            @if (Model.Status == (int)EnumSOStatus.Draft)
            {
                <th></th>
            }
        </tr>

        <tr>
            <th></th>
            <th colspan="2">Total Discount:</th>
            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.TotalDiscountAmount) </th>
            @if (Model.Status == (int)EnumSOStatus.Draft)
            {
                <th></th>
            }
        </tr>

        <tr>
            <th></th>
            <th colspan="2">Total After Discount:</th>
            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice) - Model.TotalDiscountAmount)) </th>
            @if (Model.Status == (int)EnumSOStatus.Draft)
            {
                <th></th>
            }
        </tr>

        <tr>
            <th></th>
            <th colspan="2">Courier Charge:</th>
            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.CourierCharge) </th>
            @if (Model.Status == (int)EnumSOStatus.Draft)
            {
                <th></th>
            }
        </tr>*@
                                        @*<tr>
                                            <th></th>
                                            <th colspan="5">Total Amount:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice))) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>*@
                                        
                                        <tr>
                                            <th></th>
                                            <th colspan="5">Total Amount:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice))) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                        <tr>
                                            <th></th>
                                            <th colspan="5">Discount Amount:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(Model.DiscountAmount))) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                        <tr>
                                            <th></th>
                                            <th colspan="5">Grand Total:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice)) + Convert.ToDecimal(Model.CourierCharge) - Model.DiscountAmount) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        }

                    </div>

                    @if (Model.OrderMasterId > 0 && (Model.Status == (int)EnumSOStatus.Draft || Model.Status == (int)EnumSOStatus.Submitted))
                    {
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a id="@Model.OrderMasterId" onclick="makeSubmitble(@Model.OrderMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitDealerOrderModal" data-placement="top">
                                        @if (Model.Status == (int)EnumSOStatus.Submitted)
                                        {
                                            <i>Undo Submit</i>
                                        }
                                        else
                                        {
                                            <i>Submit</i>
                                        }
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitDealerOrderMasterFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitDealerOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order (@Model.OrderNo)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidSubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })
                    @Html.HiddenFor(model => model.DiscountAmount, new { id = "hidDiscountAmount" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteDealerSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "deleteDealerSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteDealerSalesOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetSalesOrderDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">
        let dealerPrice = -1;
        let consumption = 1;
        var normal= 0;
        $(document).ready(function () {
            var orderMasterIdInit = "@Model.OrderMasterId";

            if (orderMasterIdInit > 0) {
                $('#txtProductName').focus();
            }

            $('#dealerSalesOrderSlaveFormId').on('keyup keypress', function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });

            $('#tblStockAvailable').hide();

            $('#datePickerById').datepicker({
                format: "dd/MM/yyyy",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {
                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });

            GetProduct(0);

            $("#ddlStockInfoTypeFk").change(function () {

                var stockInfoTypeId = $("#ddlStockInfoTypeFk").val();
                var zoneFk = $("#ddlZoneFk").val();
                var deport = @((int)StockInfoTypeEnum.Deport);
                if (Number(stockInfoTypeId) == deport) {

                    document.getElementById('deportDivId').style.display = 'block';
                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("GetDeportLisByZoneId", "Procurement")",
                        datatype: "Json",
                        data: { zoneId: zoneFk },
                        success: function (data) {

                            if (data) {
                                $("#ddlStockInfoId").empty();
                                $("#ddlStockInfoId").append("<option value=''>==Select Deport==</option>");
                                $(data).each(function (index, item) {
                                    $("#ddlStockInfoId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                                });
                            }
                        }
                    });
                } else {
                    document.getElementById('deportDivId').style.display = 'none';
                    $("#ddlStockInfoId").val();
                }

            });

            $("#ddlZoneFk").change(function () {

                var zoneFk = $("#ddlZoneFk").val();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetDealerLisByZoneId", "Procurement")",
                    datatype: "Json",
                    data: { zoneId: zoneFk },
                    success: function (data) {

                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Dealer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
            });

            $("#ddlPaymentMethodEnumFK").change(function () {

                var paymethod = $("#ddlPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }
            })

            $('#discountAmount').on('keyup change', function () {
                var discountAmount = $(this).val();
                $('#hidDiscountAmount').val(discountAmount);
            });
        });

        $("#txtDealerPrice ,#txtOrderCtn , #txtOrderPcs ").on('keyup change', function () {

            var qtyCtn = parseFloat($("#txtOrderCtn").val());
            var qtyPcs = parseFloat($("#txtOrderPcs").val());
            var consumption = parseFloat($("#ProductConsumption").val());
            var dealerPrice = parseFloat($("#txtDealerPrice").val());
            var tAmount = (((qtyCtn * consumption) + qtyPcs) * dealerPrice).toFixed(2);
            $("#totalAmount").val(tAmount);
            $("#SpcDis").val(0);
            $("#disPercentage").val(0);
        });

        //$("#txtDealerPrice").on('change',function () {
        //    var qty = $("#txtOrderQuantity").val();
        //    var unitPrice = $("#txtDealerPrice").val();
        //    var tAmount = qty * unitPrice;
        //    $("#totalAmount").val(tAmount);
        //});

        //$("#txtOrderQuantity").on('change', function () {

        //    var qty = $("#txtOrderQuantity").val();
        //    var unitPrice = $("#txtDealerPrice").val();
        //    var tAmount = qty * unitPrice;
        //    $("#totalAmount").val(tAmount);

        //});

        //$("#disPercentage").keyup(function () {
        //    var qty = $("#txtOrderQuantity").val();
        //    var Unit = $("#txtDealerPrice").val();
        //    var PerCentage = $("#disPercentage").val();
        //    var ammount = qty * Unit;
        //    var discountprice = ammount * (PerCentage / 100);
        //    var totalPriceAfterTotalDisPercen = ammount - discountprice;
        //    $("#SpcDis").val(discountprice);
        //    $("#totalAmount").val(totalPriceAfterTotalDisPercen);
        //});

        //$("#SpcDis").keyup(function () {

        //    var qty = $("#txtOrderQuantity").val();
        //    var Unit = $("#txtDealerPrice").val();
        //    var specialDis = $("#SpcDis").val();
        //    var ammount = qty * Unit;
        //    var percentage = ((specialDis / ammount) * 100);
        //    var totalPriceAfterTotalspecial = ammount - specialDis;
        //    $("#disPercentage").val(percentage);
        //    $("#totalAmount").val(totalPriceAfterTotalspecial);

        //});

        //$("#txtDealerPrice").keyup(function () {
        //    var qty = $("#txtOrderQuantity").val();
        //    var dealerPrice = $("#txtDealerPrice").val();
        //    var tAmount = qty * dealerPrice;
        //    $("#totalAmount").val(tAmount);
        //    //$("#SpcDis").val(0);
        //    //$("#disPercentage").val(0);
        //});

        //$("#txtOrderQuantity").keyup(function () {

        //    var qty = $("#txtOrderQuantity").val();
        //    var dealerPrice = $("#txtDealerPrice").val();
        //    var tAmount = qty * dealerPrice;
        //    $("#totalAmount").val(tAmount);

        //});

        function makeEditble(rowId) {
              $.ajax({
                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {
                      dealerPrice = data.UnitPrice;
                      $('#soCreateBtn').val("Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductId).trigger('change');
                      //$("#ddlRProductFK").val(data.FProductId);
                      $("#txtPackQuantity").val(data.PackQuantity);
                      $("#txtConsumption").val(data.Consumption);
                      $("#txtOfferQuantity").val(data.OfferQty);

                      //GetProduct(data.ProductId);
                      $("#txtOrderCtn").val(data.StockInCtn);
                      $("#txtOrderPcs").val(data.StockInPcs);
                      $("#txtOfferCtn").val(data.OfferInCtn);
                      $("#txtOfferPcs").val(data.OfferInPcs);
                      $("#txtOrderQuantity").val(data.Qty);
                      $('#txtDealerPrice').val(data.UnitPrice);
                      //$('#txtDealerPrice').val(data.UnitPrice);
                      $('#totalAmount').val(data.Qty * data.UnitPrice);

                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }

              });
        };

        function makeSubmitble(rowId) {

            if (@Model.Status == 0) {
                $('.submitOrDraftText').text("Make Submit");
            }
            else {
                $('.submitOrDraftText').text("Make Draft");
            }
            $('#hidSubmitOrderMasterId').val(@Model.OrderMasterId);
        }

        function makeDeletale(rowId) {

            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
        }

        function resetSalesOrderDeleteSlaveForm() {

            $('#dealerSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        function calculateAmount() {

            var packQuantity = $('#txtPackQuantity').val();
            var consumption = $("#txtConsumption").val();
            var quantityInKg = ((Number(packQuantity) * Number(consumption)) / 1000);
            $('#txtOrderQuantity').val(Number((quantityInKg).toFixed(3)))
        }

        function GetProduct(productId) {
            $.ajax({
                url: "@Url.Action("CommonProductGet", "Configuration")",
                data: { companyId: "@Model.CompanyFK", productSubCategoryId: 0 },
                dataType: "json",
                type: "get",
                cache: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    $(data).each(function (i, item) {
                        $('#txtProductName').append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                    })
                    if (productId > 0) {
                        $('#txtProductName').val(productId);
                    }
                },
                error: function (response) {

                    //alert(response.responseText);
                },
                failure: function (response) {

                    //alert(response.responseText);
                }
            });
        };

        $('#txtProductName').on('change', function () {
            var productId = $(this).val();
            var stockInfoTypeIdVal = $("#ddlStockInfoTypeFk").val();
            var stockInfoIdVal = $("#ddlStockInfoId").val();

            
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetFoodProductStockByProductId", "Procurement")",
                    datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", productId: productId },
                    success: function (data) {
                        if (data) {

                            if (stockInfoTypeIdVal == @((int)StockInfoTypeEnum.Company)) {
                                $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);
                                $('#stockAvailable').text(data.CurrentStockQtyCtn + ' ctn and ' + data.CurrentStockQtyPcs + ' pcs');
                            }

                            if (dealerPrice == -1) {
                                $("#txtDealerPrice").val(data.DealerPrice);

                            } else {
                                $("#txtDealerPrice").val(dealerPrice);
                                dealerPrice = -1;
                            }
                            if (consumption == 1) {

                                $("#ProductConsumption").val(data.Consumption);
                            } else {
                                $("#ProductConsumption").val(consumption);
                                consumption = 1;
                            }

                        //    var unitQty = $("#txtOrderQuantity").val();
                        }
                    }
                });
            $("#txtOrderCtn").val(0);
            $("#txtOrderPcs").val(0);
            $("#totalAmount").val(0);

            if (stockInfoTypeIdVal == @((int)StockInfoTypeEnum.Deport)) {
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetDeportProductStockByProductId", "Procurement")",
                    datatype: "Json",
                    data: { companyId: "@Model.CompanyFK", productId: productId, stockInfoId: stockInfoIdVal },
                    success: function (data) {

                        if (data) {
                            $('#tblStockAvailable').show();
                            $('.txtUnitName').text(data.UnitName);
                            $('#stockAvailable').text(data.CurrentStockQtyCtn + ' ctn and ' + data.CurrentStockQtyPcs + ' pcs');

                            var unitQty = $("#txtOrderQuantity").val();
                        }
                    }
                });
            }


        });

    </script>
}