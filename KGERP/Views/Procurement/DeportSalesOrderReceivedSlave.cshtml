@model KGERP.Service.Implementation.Procurement.VMSalesOrderSlave
@using KGERP.Utility;

@{
    ViewData["Title"] = "Deport Sales Order Received";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
    double totalPrice = 0;
    double discountPrice = 0;
    decimal dis = 0;
}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.OrderMasterId > 0)
        {
            <span>
                Sales Invoice History of: <a target="_blank" href="~/Procurement/ProcurementSalesOrderDetailsReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId">@Model.OrderNo</a>
            </span>
        }
        else
        {
            <span>
                Deport Sales Invoice
            </span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Deport Sales Invoice</li>
    </ol>
</section>

@using (Html.BeginForm("DeportSalesOrderReceivedSlave", "Procurement", FormMethod.Post, new { id = "deportSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })
                @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })

                <div class="box-danger">

                    <div class="box-body">
                        @if (Model.OrderMasterId > 0)
                        {
                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table">
                                    <tr>
                                        <th style="width:18%">Invoice No</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%"><label class="col-form-label">@Model.OrderNo</label></td>

                                        <th style="width:18%"> Date</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.OrderDate.ToShortDateString()</td>
                                    </tr>

                                    <tr>
                                        <th>Deport</th>
                                        <th>:</th>
                                        <td>@Model.CommonCustomerName</td>

                                        <th>Deport Phone</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPhone</td>
                                    </tr>
                                    <tr>
                                        <th>Deport Email</th>
                                        <th>:</th>
                                        <td>@Model.CustomerEmail</td>
                                        <th>Deport Address</th>
                                        <th>:</th>
                                        <td>@Model.CustomerAddress</td>
                                    </tr>

                                    <tr>
                                        <th>Zone</th>
                                        <th>:</th>
                                        <td>@Model.ZoneName</td>

                                        <th>Zone Incharge</th>
                                        <th>:</th>
                                        <td>@Model.ZoneIncharge</td>
                                    </tr>

                                    <tr>
                                        <th>Remarks</th>
                                        <th>:</th>
                                        <td>@Model.Remarks</td>

                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>



                            <!--Body Will by Start Here-->
                            <div class="table-responsive col-md-12  text-nowrap">
                                <table class="table table-striped">
                                    <thead>
                                        <tr class="bg-success">
                                            <th style="padding:5px;text-align:center;">SL</th>
                                            <th style="padding:5px;text-align:left;">Product</th>
                                            <th style="padding:5px;text-align:center;">Quantity</th>
                                            <th style="padding:5px;text-align:center;">Sale Price</th>
                                            <th style="padding:5px;text-align:right;">Total Price</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int i = 0;
                                        }
                                        @foreach (var item in Model.DataListSlave)
                                        {
                                            totalPrice += item.TotalAmount;
                                            discountPrice = totalPrice - Convert.ToDouble(item.ProductDiscountTotal);
                                            dis += item.ProductDiscountTotal;

                                            <tr>
                                                <td style="padding:5px">
                                                    @(++sl)
                                                </td>
                                                <td style="padding:5px;text-align:left;">@item.ProductName</td>
                                                <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.Qty) @item.UnitName</td>
                                                <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.UnitPrice)</td>
                                                <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", item.TotalPrice)</td>
                                            </tr>
                                            i++;
                                        }
                                    </tbody>

                                    <tfoot>
                                        <tr>
                                            <th></th>
                                            <th colspan="3">Grand Total:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice)) + Convert.ToDecimal(Model.CourierCharge) - Model.TotalDiscountAmount) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        }
                    </div>

                    @if (Model.OrderMasterId > 0 && Model.Status == (int)EnumSOStatus.Submitted)
                    {
                        <div class="box-footer">

                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <button type="submit" id="btnSave" class="btn btn-primary btn-block">Receive</button>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitDeportOrderMasterFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitDeportOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order (@Model.OrderNo)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidSubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteDeportSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "deleteDeportSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteDeportSalesOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetSalesOrderDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">

        var normal= 0;
        $(document).ready(function () {

            var orderMasterIdInit = "@Model.OrderMasterId";

            if (orderMasterIdInit > 0) {
                $('#txtProductName').focus();
            }

            $('#deportSalesOrderSlaveFormId').on('keyup keypress', function (e) {

                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });

            $('#tblStockAvailable').hide();

            $('#datePickerById').datepicker({
                format: "dd/MM/yyyy",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {

                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });

            $("#txtProductName").autocomplete({
                source: function (request, response) {

                    $.ajax({
                        url:"@Url.Action("AutoCompleteProductGet", "Configuration")",
                        data: { companyId: "@Model.CompanyFK", prefix: request.term, productType : "R" },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {

                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {

                            //alert(response.responseText);
                        },
                        failure: function (response) {

                            //alert(response.responseText);
                        }
                    });
                },

                  select: function (e, i) {

                    $("#ddlRProductFK").val(i.item.val);
                    $("#txtOrderQuantity").val(i.item.qty);
                    $('#txtUnitPrice').val(i.item.price);
                    $('#totalAmount').val(i.item.qty * i.item.price);

                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("GetFoodProductStockByProductId", "Procurement")",
                        datatype: "Json",
                        data: { companyId: "@Model.CompanyFK", productId: i.item.val },
                        success: function (data) {

                            if (data) {
                                $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);
                                $('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);

                                var customerTypeFK = $("#hidCustomerTypeFk").val();
                                $("#txtUnitPrice").val(data.UnitPrice);
                                var unitQty =$("#txtOrderQuantity").val();
                                $('#totalAmount').val(unitQty * data.UnitPrice);
                            }
                        }
                    });

                $('#txtPackQuantity').focus();
                $('#txtPackQuantity').select();

                },
                minLength: 1,
                cache: true

            }).focus(function () {

                $(this).autocomplete("search");
            });

            //$('#txtOrderDate').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#ddlPaymentMethodEnumFK').focus();
            //    }
            //});

            //$('#ddlCustomerId').change(function (event) {

            //    $('#txtDeliveryDate').focus();
            //});

            //$('#txtDeliveryDate').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtFinalDestination').focus();
            //    }
            //});

            //$('#txtFinalDestination').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtCourierNo').focus();
            //    }
            //});

            //$('#txtCourierNo').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtCourierCharge').focus();
            //        $('#txtCourierCharge').select();
            //    }
            //});

            //$('#txtCourierCharge').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtDescription').focus();
            //    }
            //});

            //$('#txtDescription').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtProductName').focus();
            //    }
            //});

            //$('#txtPackQuantity').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtConsumption').focus();
            //    }
            //});

            //$('#txtConsumption').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#txtUnitPrice').focus();
            //        $('#txtUnitPrice').select();

            //    }
            //});

            //$('#txtUnitPrice').keypress(function (event) {

            //    if (event.keyCode == 13) {
            //        $('#soCreateBtn').click();
            //    }
            //});

            $("#ddlZoneFk").change(function () {

                var zoneFk = $("#ddlZoneFk").val();
                $.ajax({
                type: "GET",
                url: "@Url.Action("GetDeportLisByZoneId", "Procurement")",
                datatype: "Json",
                    data: { zoneId: zoneFk},
                    success: function (data) {

                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Deport==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
            });
        })

            $("#ddlPaymentMethodEnumFK").change(function () {

                var paymethod = $("#ddlPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }
            })
        });

        $("#txtUnitPrice").keyup(function () {

            var qty = $("#txtOrderQuantity").val();
            var unitPrice = $("#txtUnitPrice").val();
            var tAmount = qty * unitPrice;
            $("#totalAmount").val(tAmount);
            $("#SpcDis").val(0);
            $("#disPercentage").val(0);
        });

        $("#disPercentage").keyup(function () {

            var qty = $("#txtOrderQuantity").val();
            var Unit = $("#txtUnitPrice").val();
            var PerCentage = $("#disPercentage").val();
            var ammount = qty * Unit;
            var discountprice = ammount * (PerCentage / 100);
            var totalPriceAfterTotalDisPercen = ammount - discountprice;
            $("#SpcDis").val(discountprice);
            $("#totalAmount").val(totalPriceAfterTotalDisPercen);

        });

        $("#SpcDis").keyup(function () {

            var qty = $("#txtOrderQuantity").val();
            var Unit = $("#txtUnitPrice").val();
            var specialDis = $("#SpcDis").val();
            var ammount = qty * Unit;
            var percentage = ((specialDis / ammount) * 100);
            var totalPriceAfterTotalspecial = ammount - specialDis;
            $("#disPercentage").val(percentage);
            $("#totalAmount").val(totalPriceAfterTotalspecial);

        });

        function makeEditble(rowId) {

            $.ajax({
                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {

                      $('#soCreateBtn').val("Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductName);
                      $("#ddlRProductFK").val(data.FProductId);
                      $("#txtPackQuantity").val(data.PackQuantity);
                      $("#txtConsumption").val(data.Consumption);

                      $("#txtOrderQuantity").val(data.Qty);
                      $('#txtUnitPrice').val(data.UnitPrice);
                      $('#totalAmount').val(data.Qty*data.UnitPrice);

                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }
                 });
            }

        function makeSubmitble(rowId) {

            if (@Model.Status == 0) {
                $('.submitOrDraftText').text("Make Submit");
            }
            else {
                $('.submitOrDraftText').text("Make Draft");
            }
            $('#hidSubmitOrderMasterId').val(@Model.OrderMasterId);
        }

        function makeDeletale(rowId) {
            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
        }

        function resetSalesOrderDeleteSlaveForm() {
            $('#deportSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        function calculateAmount() {
            var packQuantity = $('#txtPackQuantity').val();
            var consumption = $("#txtConsumption").val();
            var quantityInKg = (Number(packQuantity) * Number(consumption)) / 1000;
            $('#txtOrderQuantity').val(Number((quantityInKg).toFixed(3)))
        }


    </script>
}