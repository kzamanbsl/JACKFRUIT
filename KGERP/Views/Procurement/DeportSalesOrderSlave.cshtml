@model KGERP.Service.Implementation.Procurement.VMSalesOrderSlave
@using KGERP.Utility;


@{
    ViewData["Title"] = "Deport Sales Order";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
    double TotalPrice = 0;
    double discOuntPrice = 0;
    decimal dis = 0;
}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.OrderMasterId > 0)
        {
            <span>
                Sales Invoice History of: <a target="_blank" href="~/Procurement/ProcurementSalesOrderDetailsReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId">@Model.OrderNo</a>
            </span>
        }
        else
        {
            <span>
               Deport Sales Invoice
            </span>
        }


    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Deport Sales Invoice</li>
    </ol>
</section>

@using (Html.BeginForm("DeportSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "procurementSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })

                <div class="box-danger">

                    <!-- /.box-header -->
                    <div class="box-body">
                        @if (Model.OrderMasterId > 0)
                        {


                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table">
                                    <tr>
                                        <th style="width:18%">
                                            Invoice No
                                        </th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">
                                            <label class="col-form-label">@Model.OrderNo</label>
                                        </td>
                                        <th style="width:18%"> Date</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.OrderDate.ToShortDateString()</td>
                                    </tr>

                                    <tr>
                                        <th>Zone</th>
                                        <th>:</th>
                                        <td>@Model.ZoneName</td>

                                        <th>Incharge</th>
                                        <th>:</th>
                                        <td>@Model.ZoneIncharge</td>
                                    </tr>

                                    <tr>
                                        <th>Customer</th>
                                        <th>:</th>
                                        <td>@Model.CommonCustomerName</td>
                                        <th>Phone</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPhone</td>
                                    </tr>

                                    <tr>
                                        <th>Email</th>
                                        <th>:</th>
                                        <td>@Model.CustomerEmail</td>
                                        <th>Address</th>
                                        <th>:</th>
                                        <td>@Model.CustomerAddress</td>
                                    </tr>

                                    <tr>
                                        <th>Contact Person</th>
                                        <th>:</th>
                                        <td>@Model.ContactPerson</td>
                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>
                        }

                        <div class="box-body">

                            @if (Model.OrderMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Invoice Date:</label>
                                            <input name="OrderDate" asp-for="OrderDate" type="text" value="@DateTime.Today.ToString("yyyy-MM-dd")" required="required" class="datePicker form-control" id="txtOrderDate" placeholder="Date" autocomplete="off">
                                            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Payment Method:</label>
                                            @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Select Payment Method==", new { id = "ddlSupplierPaymentMethodEnumFK", @class = "form-control ddlReset", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Territory:</label>
                                            @Html.DropDownListFor(model => model.SubZoneFk, Model.SubZoneList as SelectList, "==Select Territory==", new { id = "ddlSubZoneFk", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.SubZoneFk, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label>Customer:</label>
                                            @Html.DropDownListFor(model => model.CustomerId, Model.CustomerList as SelectList, "==Select Customer==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Delivery Date:</label>
                                            <input name="ExpectedDeliveryDate" asp-for="ExpectedDeliveryDate" type="text" required="required" class="datePicker form-control" id="txtDeliveryDate" placeholder="Expected Delivery Date" autocomplete="off">
                                            @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Final Destination:</label>
                                            @Html.EditorFor(model => model.FinalDestination, new { htmlAttributes = new { @class = "form-control", @id = "txtFinalDestination" } })
                                            @Html.ValidationMessageFor(model => model.FinalDestination, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Courier No:</label>
                                            @Html.EditorFor(model => model.CourierNo, new { htmlAttributes = new { @class = "form-control", @id = "txtCourierNo" } })
                                            @Html.ValidationMessageFor(model => model.CourierNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Courier Charge:</label>
                                            @Html.EditorFor(model => model.CourierCharge, new { htmlAttributes = new { @class = "form-control", @id = "txtCourierCharge" } })
                                            @Html.ValidationMessageFor(model => model.CourierCharge, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtDescription" class="col-form-label">Remarks:</label>
                                            @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Description", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>


                            }
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group" style="padding:0px">
                                        <label for="message-text" class="col-form-label">Finish Item:</label>

                                        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @required = "required", @autocomplete = "on", @class = "form-control", @name = "Product Name", @id = "txtProductName" } })
                                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                        @Html.HiddenFor(model => model.FProductId, new { id = "ddlRProductFK", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.FProductId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Pack Quantity:</label>
                                        @Html.TextBoxFor(model => model.PackQuantity, new { @required = "required", id = "txtPackQuantity", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Pack Quantity" })
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Consumption (gm):</label>
                                        @Html.TextBoxFor(model => model.Consumption, new { id = "txtConsumption", @onkeyup = "calculateAmount()", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Consumption" })
                                        @Html.ValidationMessageFor(model => model.Consumption, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Order Qty:</label>
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.Qty, new { id = "txtPurchaseQuantity", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Purchase Quantity", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })

                                            <div class="input-group-addon">
                                                <span class="txtUnitName"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Unit Price:</label>
                                        @Html.TextBoxFor(model => model.UnitPrice, new { id = "txtUnitPrice", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Purchasing Price", required = "Required" })
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            @*ani*@
                            <div class="row">
                                <div class="col-md-6 text-right">
                                    <label style="margin-top:25px;">Discount:</label>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label> Percentage:</label>
                                        @Html.TextBoxFor(model => model.DiscountRate, new { id = "disPercentage", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Purchasing Price", required = "Required" })
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label> Value:</label>
                                        @Html.TextBoxFor(model => model.DiscountAmount, new { id = "SpcDis", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid;", placeholder = "Purchasing Price", required = "Required" })
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-2 text-right">
                                    
                                </div>
                                <div class="col-md-2 ">
                                    <div class="form-group ">
                                        <label>Total Amount:</label>
                                        @Html.TextBoxFor(model => model.TotalAmount, new { id = "totalamount", @readonly = "readonly", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Purchasing Price", required = "Required" })
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="box-footer">
                            <div class="row">
                                <div class="col-md-4">
                                    <table class="table" id="tblStockAvailable">
                                        <tr>
                                            <th>Available Stock: </th>
                                            <th id="stockAvailable"></th>
                                        </tr>
                                    </table>
                                </div>
                                <div class="col-md-4">

                                </div>
                                <div class="col-lg-4 col-md-4">
                                    <input type="submit" id="poCreateBtn" onclick="ClientSubmit(this)" value="submit" class="btn btn-primary btn-block" />
                                    @*<button type="submit" id="poCreateBtn" onclick="ClientSubmit(this)" class="btn btn-primary btn-block">
                                            <i class='fa fa-plus'></i>
                                            @if (Model.OrderMasterId > 0)
                                            {
                                                <span>Add Item In Order</span>
                                            }
                                            else
                                            {
                                                <span>Create New Order</span>
                                            }
                                        </button>*@
                                </div>
                            </div>
                        </div>

                        <!--Body Will by Start Here-->
                        @{
                            if (Model.OrderMasterId > 0)
                            {

                                @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })
                                <div class="table-responsive col-md-12  text-nowrap">
                                    <table id="KgErpDataTable" class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th style="padding:5px;text-align:center;">SL</th>
                                                <th style="padding:5px;text-align:left;">Item</th>
                                                <th style="text-align: left;padding-left:5px;">Pack Quantity</th>
                                                <th style="text-align: left;padding-left:5px;">Consumption</th>
                                                <th style="padding:5px;text-align:center;">Quantity</th>
                                                <th style="padding:5px;text-align:center;">Unit Price</th>
                                                <th style="padding:5px;text-align:right;">Discount(%)</th>
                                                <th style="padding:5px;text-align:right;">Total Price</th>


                                                @if (Model.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <th style="padding:5px;text-align:center;">Action</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.DataListSlave)
                                            {
                                                TotalPrice += item.TotalAmount;
                                                discOuntPrice = TotalPrice - Convert.ToDouble(item.ProductDiscountTotal);
                                                dis += item.ProductDiscountTotal;

                                                <tr>

                                                    <td style="padding:5px">@(++sl)</td>
                                                    <td style="padding:5px;text-align:left;">@item.ProductName</td>
                                                    <td style="padding:5px;text-align:left;">@item.PackQuantity</td>
                                                    <td style="padding:5px;text-align:left;">@item.Consumption</td>

                                                    <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.Qty) @item.UnitName</td>
                                                    <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.UnitPrice)</td>
                                                    <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.ProductDiscountTotal) (@String.Format("{0:0}", item.DiscountRate)%)</td>
                                                    <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", item.TotalPrice)</td>
                                                    @*<td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Convert.ToDecimal(item.Qty * item.UnitPrice)-item.ProductDiscountTotal) </td>*@
                                                    @{ if (Model.Status == (int)EnumPOStatus.Draft)
                                                        {
                                                            <td style="padding:5px;text-align:center;">
                                                                <a id="@item.ID" onclick=" makeEditble(@item.OrderDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                                <a id="@item.ID" onclick="makeDeletale(@item.OrderDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteProcurementPurchaseOrderSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                            </td>
                                                        }
                                                    }
                                                </tr>
                                            }
                                        </tbody>

                                        <tfoot>
                                            <tr>
                                                <th></th>
                                                <th colspan="6">TOTAL</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", TotalPrice) </th>
                                                @if (Model.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>
                                            <tr>
                                                <th></th>
                                                <th colspan="6">TOTAL Discount</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.TotalDiscountAmount) </th>
                                                @if (Model.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>

                                            <tr>
                                                <th></th>
                                                <th colspan="6">Total After Discount</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(TotalPrice) - Model.TotalDiscountAmount)) </th>
                                                @if (Model.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>

                                            <tr>
                                                <th></th>
                                                <th colspan="6">Courier Charge</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.CourierCharge) </th>
                                                @if (Model.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>

                                            <tr>
                                                <th></th>
                                                <th colspan="6">GRAND TOTAL</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(TotalPrice)) + Convert.ToDecimal(Model.CourierCharge) - Model.TotalDiscountAmount) </th>
                                                @if (Model.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            }
                        }
                    </div>
                    <div class="box-footer">
                        @if (Model.OrderMasterId > 0)
                        {
                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a id="@Model.OrderMasterId" onclick="makeSubmitble(@Model.OrderMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitDeportOrderModal" data-placement="top">
                                        @if (Model.Status == (int)EnumPOStatus.Submitted)
                                        {
                                            <i>Undo Submit</i>
                                        }
                                        else
                                        {
                                            <i>Submit</i>
                                        }
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitDeportOrderMastersFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitDeportOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order (<span id="submitOrDraftPOCIDText"></span>)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidsubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidsubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="ClientSubmit(this)" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@using (Html.BeginForm("DeleteDeportSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "deleteProcurementPurchaseOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteProcurementPurchaseOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })

                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })

                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetProcurementPurchaseRequisitionSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" onclick="ClientSubmit(this)" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section scripts {

    <script type="text/javascript">
        function calculateAmount() {
            var packQuantity = $('#txtPackQuantity').val();
            var consumption = $("#txtConsumption").val();
            var quantityInKg = (Number(packQuantity) * Number(consumption)) / 1000;
            $('#txtPurchaseQuantity').val(Number((quantityInKg).toFixed(3)))
        }


        function makeDeletale(rowId) {
            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
                                                    }
        function resetProcurementPurchaseRequisitionSlaveForm() {
            $('#procurementSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        var normal= 0;
        $(document).ready(function () {
            //$('.formValidator').bootstrapValidator();
            var orderMasterIdInit = "@Model.OrderMasterId";

            if (orderMasterIdInit > 0) {
                $('#txtProductName').focus();
            }


            $('#procurementSalesOrderSlaveFormId').on('keyup keypress', function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });
            $('#tblStockAvailable').hide();
            $('#datePickerById').datepicker({
                format: "yyyy-mm-dd",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {
                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });

            $("#ddlFinalDestinationCountryFk").val(19).change();
              $("#txtProductName").autocomplete({
                source: function (request, response) {

                    $.ajax({
                        url:"@Url.Action("AutoCompleteProductGet", "Configuration")",// '/AccountHeads/AutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { companyId: "@Model.CompanyFK", prefix: request.term, productType : "R" },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                },

                  select: function (e, i) {

                    $("#ddlRProductFK").val(i.item.val);

                    $.ajax({
                        type: "GET",
                        url: "@Url.Action("ProductStockByProduct", "Procurement")",
                        datatype: "Json",
                        data: { companyId: "@Model.CompanyFK", productId: i.item.val },
                        success: function (data) {
                            var items = "";
                            if (data) {
                                $('#tblStockAvailable').show();
                                $('.txtUnitName').text(data.UnitName);
                                $('#stockAvailable').text(data.CurrentStock + ' ' + data.UnitName);

                                var customerTypeFK = $("#hidCustomerTypeFk").val();
                                if (customerTypeFK == "@((int)CustomerType.Customer)") {
                                    $("#txtUnitPrice").val(data.TPPrice);
                                }
                                if (customerTypeFK == "@((int)CustomerType.Retail)") {
                                    $("#txtUnitPrice").val(data.UnitPrice);
                                }

                            }
                        }
                    });
                $('#txtPackQuantity').focus();
                $('#txtPackQuantity').select();


                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });



            $('#txtOrderDate').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#ddlSupplierPaymentMethodEnumFK').focus();
                }
            });
            $('#ddlCustomerId').change(function (event) {
                $('#txtDeliveryDate').focus();
            });
            $('#txtDeliveryDate').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtFinalDestination').focus();
                }
            });
            $('#txtFinalDestination').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtCourierNo').focus();
                }
            });
            $('#txtCourierNo').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtCourierCharge').focus();
                    $('#txtCourierCharge').select();
                }
            });
            $('#txtCourierCharge').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtDescription').focus();
                }
            });
            $('#txtDescription').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtProductName').focus();
                }
            });

            $('#txtPackQuantity').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtConsumption').focus();
                }
            });
            $('#txtConsumption').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#txtUnitPrice').focus();
                    $('#txtUnitPrice').select();

                }
            });
            $('#txtUnitPrice').keypress(function (event) {
                if (event.keyCode == 13) {
                    $('#poCreateBtn').click();
                }
            });

            $("#ddlSubZoneFk").change(function () {
                var subZoneFk = $("#ddlSubZoneFk").val();
                $.ajax({
                type: "GET",
                url: "@Url.Action("CustomerLisBySubZonetGet", "Procurement")",
                datatype: "Json",
                    data: { subZoneId: subZoneFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
            });
        })

            $("#TermsAndConditionid").change(function () {
                var termsAndConditionid = $('#TermsAndConditionid').val();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetTermNCondition", "Procurement")",
                    datatype: "Json",
                    data: { id: termsAndConditionid },
                    success: function (data) {
                        $('#txtTermsAndCondition').empty();
                        $('#txtTermsAndCondition').append(data.description);
                        }
                    });
             });


            $("#ddlSupplierPaymentMethodEnumFK").change(function () {
                var paymethod = $("#ddlSupplierPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }
            })
        });

        function makeEditble(rowId) {

            $.ajax({

                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {

                      $('#poCreateBtn').html("<i class='fa fa-edit'></i>&nbsp;Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductName);
                      $("#ddlRProductFK").val(data.FProductId);
                      $("#txtPackQuantity").val(data.PackQuantity);
                      $("#txtConsumption").val(data.Consumption);

                      $("#txtPurchaseQuantity").val(data.Qty);
                      $('#txtUnitPrice').val(data.UnitPrice);
                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }
                 });
            }

        function makeSubmitble(rowId) {
                $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                        datatype: "Json",
                    data: { orderMasterId: rowId },
                        success: function (data) {
                            console.log(data);
                            $('#submitOrDraftPOCIDText').text(data.OrderNo);

                            if (data.Status == 0) {
                                $('.submitOrDraftText').text("Make Submit");
                            }
                            else {
                                $('.submitOrDraftText').text("Make Draft");

                            }
                        }
                 });
                $('#hidsubmitProcurementPurchaseOrderId').val(rowId);
        }



        //$("#txtUnitPrice").keyup(function () {
        //    var discountunitprice = $("#ProductDiscountUnit").val();
        //    var qty = $("#txtPurchaseQuantity").val();
        //    var unitprice = $("#txtUnitPrice").val();
        //    var TotalPrice = 0;
        //    if (discountunitprice == 0) {

        //       TotalPrice = qty * unitprice;
        //        normaltotalprice = TotalPrice;
        //        $("#txtTotalAmount").val(TotalPrice);
        //        $("#txtCashDiscountPercent").val(0);
        //        $("#txtSpecialDiscount").val(0);

        //    } else {
        //         TotalPrice = qty * unitprice;
        //        var TotalPriceafterPerUnitDiscount = TotalPrice - (qty * discountunitprice)
        //        normaltotalprice = TotalPriceafterPerUnitDiscount;
        //        $("#txtTotalAmount").val(TotalPriceafterPerUnitDiscount);
        //        $("#txtCashDiscountPercent").val(0);
        //        $("#txtSpecialDiscount").val(0);

        //    }

        //});

        //$("#ProductDiscountUnit").keyup(function () {
        //    $("#ProductDiscountUnit").empty();
        //    var unitprice = $("#txtUnitPrice").val();
        //    var qty = $("#txtPurchaseQuantity").val();
        //    var discountperunit = $("#ProductDiscountUnit").val();

        //    var total = qty * unitprice
        //    var TotalPriceafterPerUnitDiscount = total - (qty * discountperunit)

        //    $("#txtTotalAmount").val(TotalPriceafterPerUnitDiscount);
        //    $("#txtCashDiscountPercent").val(0);
        //    $("#txtSpecialDiscount").val(0);
        //});



        //$("#txtCashDiscountPercent").keyup(function () {
        //    var cashdis = $("#txtCashDiscountPercent").val();
        //    var spcl = $("#txtSpecialDiscount").val();
        //    var qty = $("#txtUnitPrice").val();
        //    var qty = $("#txtUnitPrice").val();


        //    if (cashdis == 0 && spcl == 0) {

        //    }

        //    /*var cashdis = $("#txtCashDiscountPercent").val();*/





        //});


        //$("#txtSpecialDiscount").keyup(function () {
        //    //$("#ProductDiscountUnit").empty();
        //    //var unitprice = $("#txtUnitPrice").val();
        //    //var qty = $("#txtPurchaseQuantity").val();
        //    //var discountperunit = $("#ProductDiscountUnit").val();
        //    var ttlamnt = $("#txtTotalAmount").val();
        //    var cashdis = $("#txtSpecialDiscount").val();
        //    //var total = qty * unitprice
        //    //var TotalPriceafterPerUnitDiscount = total - (qty * discountperunit)

        //    //$("#txtTotalAmount").val(TotalPriceafterPerUnitDiscount);
        //    var cashdiscountAfterDiscount = (ttlamnt - cashdis );

        //    $("#txtTotalAmount").val(cashdiscountAfterDiscount);

        //});
        $("#txtUnitPrice").keyup(function () {
            var qty = $("#txtPurchaseQuantity").val();
            var Unit = $("#txtUnitPrice").val();
            var Tammount = qty * Unit;
            $("#totalamount").val(Tammount);
            var ammount = qty * Unit;
            $("#SpcDis").val(0);
            $("#disPercentage").val(0);
        });

        $("#disPercentage").keyup(function () {

            var qty=$("#txtPurchaseQuantity").val();
            var Unit = $("#txtUnitPrice").val();
            var PerCentage = $("#disPercentage").val();
            var ammount = qty * Unit;
            var discountprice = ammount * (PerCentage / 100);
            var totalPriceAfterTotalDisPercen = ammount - discountprice;
            $("#SpcDis").val(discountprice);
            $("#totalamount").val(totalPriceAfterTotalDisPercen);

        });
        $("#SpcDis").keyup(function () {

            var qty = $("#txtPurchaseQuantity").val();
            var Unit = $("#txtUnitPrice").val();
            var specialDis = $("#SpcDis").val();
            var ammount = qty * Unit;
            var percentage = ((specialDis / ammount) * 100);
            var totalPriceAfterTotalspecial = ammount - specialDis;
            $("#disPercentage").val(percentage);
            $("#totalamount").val(totalPriceAfterTotalspecial);

        });

    </script>
}