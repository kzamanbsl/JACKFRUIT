@model KGERP.Service.Implementation.Procurement.VMSalesOrderSlave
@using KGERP.Utility;

@{
    ViewData["Title"] = "Customer Sales Order";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
    double totalPrice = 0;
    double discountPrice = 0;
    decimal dis = 0;
}

<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.OrderMasterId > 0)
        {
            <span>
                Sales Invoice History of:&nbsp; @Model.OrderNo
            </span>
        }
        else
        {
            <span>
                SR Sales Invoice
            </span>
        }
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">SR Sales Invoice</li>
        <li><a class="active btn btn-primary" data-toggle="modal" data-target="#addCustomerModal" style="color:white!important"> Add Customer</a></li>

    </ol>
</section>

@using (Html.BeginForm("SRSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "dealerSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })
                @Html.HiddenFor(model => model.Consumption, new { id = "ProductConsumption" })
                @Html.HiddenFor(model => model.StockInfoTypeId, new { id = "stockInfoTypeId" })
                <span id="hiddenUnitPrice" hidden="hidden"></span>
                <div class="box-danger">

                    <div class="box-body">

                        @if (Model.OrderMasterId > 0)
                        {
                            @Html.HiddenFor(model => model.StockInfoId, new { id = "ddlStockInfoId" })

                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table">
                                    <tr>
                                        <th style="width:18%">Sales From</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.StockInfoName</td>

                                        <th style="width:18%"> Date</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.OrderDate.ToShortDateString()</td>
                                    </tr>

                                    <tr>
                                        <th>Customer</th>
                                        <th>:</th>
                                        <td>@Model.CommonCustomerName</td>

                                        <th>Customer Phone</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPhone</td>
                                    </tr>
                                    <tr>
                                        <th>Customer Email</th>
                                        <th>:</th>
                                        <td>@Model.CustomerEmail</td>
                                        <th>Customer Address</th>
                                        <th>:</th>
                                        <td>@Model.CustomerAddress</td>
                                    </tr>

                                    <tr>
                                        <th>Zone</th>
                                        <th>:</th>
                                        <td>@Model.ZoneName</td>

                                        <th>Zone Incharge</th>
                                        <th>:</th>
                                        <td>@Model.ZoneIncharge</td>
                                    </tr>

                                    <tr>
                                        <th>Remarks</th>
                                        <th>:</th>
                                        <td>@Model.Remarks</td>

                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-1"> </div>
                        }

                        <div class="box-body">

                            @if (Model.OrderMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-4">
                                        <label for="message-text" class="col-form-label">Invoice Date:</label>
                                        <div class="form-group">
                                            <input name="OrderDate" asp-for="OrderDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker" placeholder="Invoice Date" autocomplete="off" id="txtOrderDate">
                                            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="message-text" class="col-form-label">Delivery Date:</label>
                                        <div class="form-group">
                                            <input name="ExpectedDeliveryDate" asp-for="ExpectedDeliveryDate" type="datetime" value="@DateTime.Now.ToString("dd/MM/yyyy")" required="required" class="datepicker" placeholder="Expected Delivery Date" autocomplete="off" id="txtDeliveryDate">
                                            @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label>Payment Method:</label>
                                            @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Select Payment Method==", new { id = "ddlPaymentMethodEnumFK", @class = "form-control ddlReset", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>

                                <div class="row">

                                    @*<div class="col-md-4">
                                            <div class="form-group">
                                                <label>Deport:</label>
                                                @Html.DropDownListFor(model => model.DeportId, Model.DeportList as SelectList, "==Select Deport==", new { id = "ddlZoneFk", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                                @Html.ValidationMessageFor(model => model.ZoneFk, "", new { @class = "text-danger" })
                                            </div>
                                        </div>*@
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Sales From (Dealer): </label>
                                            @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Select Sales From==", new { id = "ddlStockInfoId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Territory:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.SubZoneId, Model.SubZoneList as SelectList, new { id = "ddlFormSubZoneId", @class = "form-control ", required = "true" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.SubZoneId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Customer:</label>
                                            @Html.DropDownListFor(model => model.CustomerId, Model.CustomerList as SelectList, "==Select Customer==", new { id = "ddlCustomerId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label></label>
                                            <div id="customerDetails_Div">

                                            </div>
                                        </div>
                                    </div>


                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtDescription" class="col-form-label">Remarks:</label>
                                            @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Description", @class = "form-control", rows = 2 })
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (Model.Status == (int)EnumSOStatus.Draft)
                            {
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Product:</label>

                                            @*@Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @required = "required", @autocomplete = "on", @class = "form-control", @name = "Product Name", @id = "txtProductName" } })*@

                                            @Html.DropDownListFor(model => model.ProductId, Model.ProductList as SelectList, "==Select Product==", new { id = "txtProductName", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })

                                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(model => model.FProductId, new { id = "ddlRProductFK", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Order Ctn:</label>
                                            @Html.TextBoxFor(model => model.QtyCtn, new { id = "txtOrderCtn", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Order Ctn", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.QtyCtn, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Order Pcs:</label>
                                            @Html.TextBoxFor(model => model.QtyPcs, new { id = "txtOrderPcs", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Order Pcs" })
                                            @Html.ValidationMessageFor(model => model.QtyPcs, "", new { @class = "text-danger" })

                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Free Ctn:</label>
                                            @Html.TextBoxFor(model => model.OfferCtn, new { id = "txtOfferCtn", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Offer Ctn", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.OfferCtn, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Free Pcs:</label>

                                            @Html.TextBoxFor(model => model.OfferPcs, new { id = "txtOfferPcs", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Offer pcs" })
                                            @Html.ValidationMessageFor(model => model.OfferPcs, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>

                                <div class="row">

                                    <div class="col-md-6"></div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Customer Price:</label>
                                            @Html.TextBoxFor(model => model.UnitPrice, new { id = "txtCustomerPrice", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Customer Price", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="col-md-2">
                                        <div class="form-group ">
                                            <label>Total Amount:</label>
                                            @Html.TextBoxFor(model => model.TotalAmount, new { id = "totalAmount", @readonly = "readonly", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Total Amount", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Total Discount:</label>
                                            @Html.TextBoxFor(model => model.DiscountAmount, new { id = "txtDiscountAmount", type = "number", step = "0.01", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Discount Price" })
                                            @Html.ValidationMessageFor(model => model.DiscountAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (Model.Status == (int)EnumSOStatus.Draft)
                        {
                            <div class="box-footer">
                                <div class="row">
                                    <div class="col-md-4">
                                        <table class="table" id="tblStockAvailable">
                                            <tr>
                                                <th>Available Stock: </th>
                                                <th id="stockAvailable"> </th>
                                            </tr>

                                        </table>

                                    </div>
                                    <div class="col-md-4">

                                    </div>
                                    <div class="col-lg-4 col-md-4">
                                        <input type="submit" id="soCreateBtn" value="Add Product" class="btn btn-primary btn-block" />
                                    </div>
                                </div>
                            </div>
                        }

                        <!--Body Will by Start Here-->
                        @if (Model.OrderMasterId > 0)
                        {

                            @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })
                            <div class="table-responsive col-md-12  text-nowrap">
                                <table id="KgErpDataTable" class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th style="padding:5px;text-align:center;">SL</th>
                                            <th style="padding:5px;text-align:left;">Product</th>
                                            <th style="padding:5px;text-align:center;">Cons</th>
                                            <th style="padding:5px;text-align:center;">Quantity</th>
                                            <th style="padding:5px;text-align:center;">Free Qty</th>
                                            <th style="padding:5px;text-align:center;">Customer Price</th>
                                            <th style="padding:5px;text-align:right;">Total Price</th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th style="padding:5px;text-align:center;">Action</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.DataListSlave)
                                        {
                                            totalPrice += item.TotalAmount;
                                            discountPrice = totalPrice - Convert.ToDouble(item.ProductDiscountTotal);
                                            dis += item.ProductDiscountTotal;

                                            <tr>

                                                <td style="padding:5px">@(++sl)</td>
                                                <td style="padding:5px;text-align:left;">@item.ProductName</td>
                                                <td style="padding: 5px; text-align: center;">@item.Consumption</td>
                                                @*<td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.Qty) @item.UnitName</td>*@
                                                <td style="padding:5px;text-align:center;">@item.StockInCtn Ctn And @item.StockInPcs.ToString("0") Pcs</td>
                                                <td style="padding:5px;text-align:center;">@item.OfferInCtn Ctn And @item.OfferInPcs.ToString("0") Pcs </td>
                                                @*<td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.OfferQty) </td>*@
                                                <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.UnitPrice)</td>
                                                <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", item.TotalAmount)</td>

                                                @{ if (Model.Status == (int)EnumSOStatus.Draft)
                                                    {
                                                        <td style="padding:5px;text-align:center;">
                                                            <a id="@item.ID" onclick=" makeEditble(@item.OrderDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                            <a id="@item.ID" onclick="makeDeletale(@item.OrderDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteFoodCustomerSalesOrderSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>

                                    <tfoot>
                                        @*<tr>
                                                <th></th>
                                                <th colspan="2">Total:</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", totalPrice) </th>
                                                @if (Model.Status == (int)EnumSOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>

                                            <tr>
                                                <th></th>
                                                <th colspan="2">Total Discount:</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.TotalDiscountAmount) </th>
                                                @if (Model.Status == (int)EnumSOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>

                                            <tr>
                                                <th></th>
                                                <th colspan="2">Total After Discount:</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice) - Model.TotalDiscountAmount)) </th>
                                                @if (Model.Status == (int)EnumSOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>

                                            <tr>
                                                <th></th>
                                                <th colspan="2">Courier Charge:</th>
                                                <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", Model.CourierCharge) </th>
                                                @if (Model.Status == (int)EnumSOStatus.Draft)
                                                {
                                                    <th></th>
                                                }
                                            </tr>*@

                                        <tr>
                                            <th></th>
                                            <th colspan="5">Total Amount:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice))) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                        <tr>
                                            <th></th>
                                            <th colspan="5">Discount Amount:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(Model.DiscountAmount))) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                        <tr>
                                            <th></th>
                                            <th colspan="5">Grand Total:</th>
                                            <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (Convert.ToDecimal(totalPrice)) + Convert.ToDecimal(Model.CourierCharge) - Model.DiscountAmount) </th>
                                            @if (Model.Status == (int)EnumSOStatus.Draft)
                                            {
                                                <th></th>
                                            }
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        }

                    </div>

                    @if (Model.OrderMasterId > 0)
                    {
                        <div class="box-footer">

                            <div class="row">
                                <div class="col-md-6"></div>
                                <div class="col-md-6">
                                    <a id="@Model.OrderMasterId" onclick="makeSubmitble(@Model.OrderMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitFoodCustomerOrderModal" data-placement="top">
                                        @if (Model.Status == (int)EnumSOStatus.Submitted)
                                        {
                                            <i>Undo Submit</i>
                                        }
                                        else
                                        {
                                            <i>Submit</i>
                                        }
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("SubmitSrOrderMasterFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitFoodCustomerOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order (@Model.OrderNo)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidSubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidSubmitCompanyFK" })
                    @Html.HiddenFor(model => model.DiscountAmount, new { id = "hidDiscountAmount" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnDelete2" onclick="makeSubmitble(this)" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("DeleteFoodCustomerSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "deleteFoodCustomerSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteFoodCustomerSalesOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })
                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetSalesOrderDeleteSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btndelete" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("SRAddCustomer", "Configuration", FormMethod.Post, new { id = "addCustomerId", @class = "formValidator" }))
{
    <div class="modal fade" id="addCustomerModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="close pull-right" data-dismiss="modal" aria-label="close"> &times;</button>
                    <h3 class="modal-title"><b>Add New Customer</b></h3>
                </div>

                <div class="modal-body">

                    <div class="box">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="box-danger">
                            @*<div class="box-header">
                                    <h4>Add Deport</h4>
                                </div>*@
                            <!-- /.box-header -->
                            <div class="box-body">

                                @Html.HiddenFor(model => model.ID, new { id = "customerId" })
                                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                                @Html.HiddenFor(model => model.CommonSupplier.ZoneId, new { id = "zoneFK" })
                                @Html.HiddenFor(model => model.CommonSupplier.ZoneDivisionId, new { id = "zoneDivisionFK" })
                                @Html.HiddenFor(model => model.CommonSupplier.RegionId, new { id = "regionFK" })
                                @Html.HiddenFor(model => model.CommonSupplier.AreaId, new { id = "areaFK" })

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Customer Name:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.Name, new { id = "txtCustomerName", @class = "form-control", @placeholder = "Customer Name", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.Name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Phone:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.Phone, new { id = "txtPhone", @class = "form-control", @placeholder = "Contact No", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.Phone, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Email:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.Email, new { id = "txtEmail", @class = "form-control", @placeholder = "Email" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.Email, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Proprietor:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.Propietor, new { id = "txtProprietor", @class = "form-control", @placeholder = "Propietor" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.Propietor, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Contact Person:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.ContactPerson, new { id = "txtContactPerson", @class = "form-control", @placeholder = "Contact Person" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.ContactPerson, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">NID No:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.NID, new { id = "txtNID", @class = "form-control", @placeholder = "NID No" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.NID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Customer Type:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.CustomerTypeFk, Model.CommonSupplier.CustomerTypeList as SelectList, "--Customer Type--", new { id = "ddCustomerTypeFk", @class = "form-control", required = "true" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.CustomerTypeFk, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Customer Status:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.CustomerStatus, Model.CommonSupplier.CustomerStatusEnumList as SelectList, "--Select Customer Status--", new { id = "ddlCustomerStatus", @class = "form-control", required = "true" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.CustomerStatus, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Payment Type:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.PaymentType, Model.CommonSupplier.PaymentTypeList as SelectList, "--Payment Type--", new { id = "txtPaymentType", @class = "form-control", required = "true" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.PaymentType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Security Amount:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.SecurityAmount, new { id = "txtSecurityAmount", @class = "form-control", @placeholder = "Security Amount" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.SecurityAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Credit Limit:</label>
                                            @Html.TextBoxFor(model => model.CommonSupplier.CreditLimit, new { id = "txtCreditLimit", @class = "form-control", @placeholder = "Credit Limit" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.CreditLimit, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Zone:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.ZoneId, Model.ZoneList as SelectList, "--Select Zone--", new { id = "ddlModalZoneId", @class = "form-control ", required = "true", @disabled = "disabled" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.ZoneId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Division:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.ZoneDivisionId, Model.ZoneDivisionList as SelectList, new { id = "ddlModalZoneDivisionId", @class = "form-control ", required = "true", @disabled = "disabled" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.ZoneDivisionId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Region:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.RegionId, Model.RegionList as SelectList, new { id = "ddlModalRegionId", @class = "form-control ", required = "true", @disabled = "disabled" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.RegionId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Area:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.AreaId, Model.AreaList as SelectList, new { id = "ddlModalAreaId", @class = "form-control ", required = "true", @disabled = "disabled" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.AreaId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">

                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Territory:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.SubZoneId, Model.SubZoneList as SelectList, new { id = "ddlModalSubZoneId", @class = "form-control ", required = "true" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.SubZoneId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Dealer:</label>
                                            @Html.DropDownListFor(model => model.CommonSupplier.ParentId, Model.StockInfoList as SelectList, "==Select Dealer==", new { id = "ddlDealerId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.ParentId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="message-text" class="col-form-label">Address:</label>
                                            @Html.TextAreaFor(model => model.CommonSupplier.Address, new { id = "txtAddress", @rows = "1", @class = "form-control", @placeholder = "Address" })
                                            @Html.ValidationMessageFor(model => model.CommonSupplier.Address, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="box-footer">
                                <div class="row">

                                    <div class="col-md-3 col-sm-3">
                                        <button type="button" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    </div>
                                    <div class="col-md-9 col-sm-9">
                                        <button type="submit" id="btnSave" class="btn btn-primary btn-block"><i class='fa fa-plus'></i>Add</button>
                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>


                </div>
            </div>

        </div>

    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")

@section scripts {

    <script type="text/javascript">

        let customerPrice = null;
        let consumption = 1;
        var normal = 0;

        $(document).ready(function () {

            var orderMasterIdInit = "@Model.OrderMasterId";

            if (orderMasterIdInit > 0) {
                $('#txtProductName').focus();
            }

            $('#dealerSalesOrderSlaveFormId').on('keyup keypress', function (e) {

                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
            });

            $('#tblStockAvailable').hide();

            $('#datePickerById').datepicker({
                format: "dd/MM/yyyy",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true
            }).on('changeDate', function (ev) {

                if ($(this).parents('form') && $(this).attr('required')) {
                    $(this).parents('form').bootstrapValidator('revalidateField', $(this));
                }
            });

            $.ajax({
                url: "@Url.Action("CommonProductGet", "Configuration")",
                data: { companyId: "@Model.CompanyFK", productSubCategoryId: 0 },
                dataType: "json",
                type: "get",
                cache: true,
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    $(data).each(function (i, item) {
                        $('#txtProductName').append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                    })
                },
                error: function (response) {

                    //alert(response.responseText);
                },
                failure: function (response) {

                    //alert(response.responseText);
                }
            });

            $("#ddlZoneFk").change(function () {

                var zoneFk = $("#ddlZoneFk").val();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("CustomerListByZonetGet", "Procurement")",
                    datatype: "Json",
                    data: { zoneId: zoneFk },
                    success: function (data) {

                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetDealerLisByZoneId", "Procurement")",
                    datatype: "Json",
                    data: { zoneId: zoneFk },
                    success: function (data) {

                        if (data) {
                            $("#ddlStockInfoId").empty();
                            $("#ddlStockInfoId").append("<option value=''>==Select Stock From==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlStockInfoId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
            });

            $("#ddlPaymentMethodEnumFK").change(function () {

                var paymethod = $("#ddlPaymentMethodEnumFK").val();
                if (paymethod === "@((int)VendorsPaymentMethodEnum.LC)") {
                    $("#piReletedDivId").show();
                }
                else {
                    $("#piReletedDivId").hide();
                }
            });

            var dealerList = $('#ddlStockInfoId option');

            if (dealerList.length == 2)
            {
                var dealerValue = parseFloat($('#ddlStockInfoId option:eq(1)').val());
                $('#ddlStockInfoId').val(dealerValue).trigger('change');
                $('#ddlDealerId').val(dealerValue).trigger('change');
            //    $('#ddlStockInfoId').attr('disabled', true);
            }

            $('#txtDiscountAmount').on('keyup change', function () {
                var discountAmount = $(this).val();
                $('#hidDiscountAmount').val(discountAmount);
            });
        });

        $("#ddlStockInfoId").change(function () {

            var dealerId = $("#ddlStockInfoId").val();

            if (dealerId == (null | 0)) {
                return null;
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetCustomerByDealerId", "Configuration")",
                    datatype: "Json",
                    data: { dealerId: dealerId },
                    success: function (data) {

                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
            }
        });

        $("#ddlFormSubZoneId").change(function () {

            var subZoenId = $("#ddlFormSubZoneId").val();

            if (subZoenId == (null | 0)) {
                return null;
            }
            else {
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetCustomerBySubZones", "Configuration")",
                    datatype: "Json",
                    data: { zoneId: 0, zoneDivisionId: 0, regionId: 0, areaId: 0, subZoneId: subZoenId },
                    success: function (data) {

                        if (data) {
                            $("#ddlCustomerId").empty();
                            $("#ddlCustomerId").append("<option value=''>==Select Customer==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCustomerId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
            }
        });

        $("#txtCustomerPrice ,#txtOrderCtn , #txtOrderPcs ").on('keyup change', function () {

            var qtyCtn = parseFloat($("#txtOrderCtn").val());
            var qtyPcs = parseFloat($("#txtOrderPcs").val());
            var consumption = parseFloat($("#ProductConsumption").val());
            var customerPrice = parseFloat($("#txtCustomerPrice").val());
            var tAmount = (((qtyCtn * consumption) + qtyPcs) * customerPrice).toFixed(2);

            $("#totalAmount").val(tAmount);
            $("#SpcDis").val(0);
            $("#disPercentage").val(0);
        });


        function makeEditble(rowId) {

            $.ajax({

                  type: "POST",
                  url: "@Url.Action("SingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {
                      customerPrice = data.UnitPrice;
                      consumption = data.Consumption;

                      $('#soCreateBtn').val("Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $('#hiddenUnitPrice').val(data.UnitPrice);
                      $("#txtProductName").val(data.ProductId).trigger('change');
                      $("#ddlRProductFK").val(data.FProductId);
                      $("#txtPackQuantity").val(data.PackQuantity);
                      $("#txtConsumption").val(data.Consumption);
                      $("#txtOfferCtn").val(data.OfferInCtn);
                      $("#txtOfferPcs").val(data.OfferInPcs);
                      $("#txtOrderCtn").val(data.StockInCtn);
                      $("#txtOrderPcs").val(data.StockInPcs);
                      $('#txtCustomerPrice').val(data.UnitPrice);
                      $('#totalAmount').val((data.Qty * data.UnitPrice).toFixed(2));
                     /* $('#txtDiscountAmount').val(data.DiscountAmount);*/
                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      $('.txtUnitName').text(data.UnitName);
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }
                 });
            }

        function makeSubmitble(rowId) {

            if (@Model.Status == 0) {
                $('.submitOrDraftText').text("Make Submit");
            }
            else {
                $('.submitOrDraftText').text("Make Draft");
            }
            $('#hidSubmitOrderMasterId').val(@Model.OrderMasterId);
        }

        function makeDeletale(rowId) {

            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
        }

        function resetSalesOrderDeleteSlaveForm() {

            $('#dealerSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        function calculateAmount() {

            var packQuantity = $('#txtPackQuantity').val();
            var consumption = $("#txtConsumption").val();
            var quantityInKg = (Number(packQuantity) * Number(consumption)) / 1000;
            $('#txtOrderQuantity').val(Number((quantityInKg).toFixed(3)))
        }

        $('#txtProductName').on('change', function () {
            var productId = $(this).val();
            var stockInfoIdVal = $("#ddlStockInfoId").val();
            //var stockInfoTypeIdVal =@((int)StockInfoTypeEnum.Deport);
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetDealerProductStockByProductId", "Procurement")",
                datatype: "Json",
                data: { companyId: "@Model.CompanyFK", productId: productId, stockInfoId: stockInfoIdVal },
                success: function (data) {

                    if (data) {
                        $('#tblStockAvailable').show();
                        $('.txtUnitName').text(data.UnitName);
                        $('#stockAvailable').text(Math.floor(data.CurrentStockQtyCtn) + ' ctn and ' + (data.CurrentStockQty - (Math.floor(data.CurrentStockQtyCtn) * data.Consumption)) + ' pcs');
                        var ctnAndPcs = data.CurrentStockQtyPcs + data.CurrentStockQtyCtn;

                        if (ctnAndPcs < 1) {
                            $('#dealerSalesOrderSlaveFormId').validate({ onsubmit: false });
                            $('#soCreateBtn').prop("disabled", true);
                            $('#stockAvailable').css("color","red");

                        } else {
                            $('#soCreateBtn').prop("disabled", false);
                            $('#stockAvailable').css("color", "black");
                        }

                        if (customerPrice == null) {
                            $("#txtCustomerPrice").val(data.CustomerPrice);

                        } else {
                            $("#txtCustomerPrice").val(customerPrice);
                            customerPrice = null;
                        }
                        if (consumption == 1) {

                            $("#ProductConsumption").val(data.Consumption);
                        } else {
                            $("#ProductConsumption").val(consumption);
                            consumption = 1;
                        }
                        //var unitQty = $("#txtOrderQuantity").val();
                    }
                }
            });
            $("#txtOrderCtn").val(0);
            $("#txtOrderPcs").val(0);
            $("#totalAmount").val(0);

        });


        $('#ddlModalZoneId').on('change', function () {
            var zoneId = $("#ddlModalZoneId :selected").val();

            /*zoneDivisionChange(0, zoneId);*/

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetZoneDivisionList", "Configuration")",
                datatype: "Json",
                data: { companyId:@Model.CompanyFK, zoneId: zoneId },
                success: function (data) {

                    if (data) {
                        $("#ddlModalZoneDivisionId").empty();
                        //$("#ddlModalZoneDivisionId").append("<option value=''>==Select Division==</option>");
                        $(data).each(function (index, item) {
                            $("#ddlModalZoneDivisionId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });
                    }
                }
            });
        });


        $("#ddlModalZoneDivisionId").on('change', function () {
            var zoneId = $("#ddlModalZoneId :selected").val();
            var zoneDivisionId = $("#ddlModalZoneDivisionId :selected").val();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetRegionList", "Configuration")",
                datatype: "Json",
                data: { companyId:@Model.CompanyFK, zoneId: zoneId, zoneDivisionId: zoneDivisionId },
                success: function (data) {

                    if (data) {
                        $("#ddlModalRegionId").empty();
                        //$("#ddlModalRegionId").append("<option value=''>==Select Region==</option>");
                        $(data).each(function (index, item) {
                            $("#ddlModalRegionId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });
                    }
                }
            });

        });

        $("#ddlModalRegionId").on("change", function () {
            var zoneId = $("#ddlModalZoneId :selected").val();
            var zoneDivisionId = $("#ddlModalZoneDivisionId :selected").val();
            var regionId = $("#ddlModalRegionId :selected").val();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAreaList", "Configuration")",
                datatype: "Json",
                data: { companyId:@Model.CompanyFK, zoneId: zoneId, zoneDivisionId: zoneDivisionId, regionId: regionId },
                success: function (data) {
                    if (data) {
                        $("#ddlModalAreaId").empty();
                        $(data).each(function (index, item) {
                            $("#ddlModalAreaId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                        });

                    }
                }
            });
        });

        $("#ddlCustomerId").on("change", function () {
            var customerId = $("#ddlCustomerId :selected").val();
            $.ajax({
                type: "GET",
                url: "@Url.Action("CommonCustomerByIDGet", "Configuration")",
                datatype: "Json",
                data: { id: customerId },
                success: function (data) {
                    if (data) {
                        if (data.ID > 0) {
                            $("#customerDetails_Div").html(`
                        <Strong>Phone :</Strong> ${data.Phone} <br/>
                        <Strong>Address :</Strong> ${data.Address} <br/>`);
                        }
                        else {
                            $("#customerDetails_Div").html('');
                        }

                    }
                },
                error: function(error){
                    $("#customerDetails_Div").html('');
                }
            });
        });

        $("#ddlModalAreaId").on("change", function () {
            var zoneId = $("#ddlModalZoneId :selected").val();
            var zoneDivisionId = $("#ddlModalZoneDivisionId :selected").val();
            var regionId = $("#ddlModalRegionId :selected").val();
            var areaId = $("#ddlModalAreaId :selected").val();
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetSubZoneList", "Configuration")",
                datatype: "Json",
                data: { companyId:@Model.CompanyFK, zoneId: zoneId, zoneDivisionId: zoneDivisionId, regionId: regionId, areaId: areaId },
                success: function (data) {
                    if (data) {
                        $("#ddlModalSubZoneId").empty();
                        //$("#ddlSubZoneId").append("<option value=''>==Select Territory==</option>");
                        $(data).each(function (index, item) {
                            $("#ddlModalSubZoneId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            console.log(item.Text);
                        });
                        if (territoryValue > 0) {
                            $("#ddlModalSubZoneId").val(territoryValue);
                        }
                    }
                }
            });
        });



    </script>
}